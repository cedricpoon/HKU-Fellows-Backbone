openapi: 3.0.0
info:
  title: HKU Fellows Backbone
  description: The RESTful WebAPI of Project HKU Fellows [https://i.cs.hku.hk/fyp/2018/fyp18005/](https://i.cs.hku.hk/fyp/2018/fyp18005/)
  version: 0.0.0 Private
servers:
- url: /
  description: Local server by `npm start` or `npm run docker`
- url: https://api.hkufellows.ga
  description: Production server located on AWS EC2
tags:
  - name: Miscellaneous
    description: Common routes from `index.js`
  - name: Authentication
    description: Login related routes from `login.js`
  - name: User Profile
    description: User related informational routes from `profile.js`
  - name: Posts
    description: Post related routes from `post.js`
  - name: Fetch Posts
    description: Viewing posts related routes from `view.js`
  - name: Create Posts
    description: Composing posts related routes from `compose.js`
  - name: Rate Posts
    description: Voting posts related routes from `vote.js`
  - name: Export
    description: Export various data from Database, **for internal development ONLY**
paths:
  /profile/temperature:
    post:
      summary: Get user temperature
      description: Sum all user related posts' temperature as user temperature
      tags:
        - User Profile
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                token:
                  $ref: "#/components/schemas/token"
      responses:
        200:
          description: 200 - Success<br>401 - Unauthenticated<br>500 - Unknown error<br>502 - Database issue
          content:
            application/json:
              schema:
                properties:
                  temperature:
                    type: number
                    description: User temperature
          examples:
            Success:
              status: 200
              payload: {"temperature": 200}
            Failure:
              status: 500
              error: "Unknown error"
  /vote/{postId}/like:
    post:
      summary: Like a post
      description: Rate a post in database with a like
      tags:
        - Rate Posts
      parameters:
        - name: postId
          in: path
          description: Id of a post
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                token:
                  $ref: "#/components/schemas/token"
                moodleKey:
                  $ref: "#/components/schemas/moodleKey"
      responses:
        200:
          $ref: "#/components/responses/Rate"
  /vote/{postId}/dislike:
    post:
      summary: Dislike a post
      description: Rate a post in database with a dislike
      tags:
        - Rate Posts
      parameters:
        - name: postId
          in: path
          description: Id of a post
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                token:
                  $ref: "#/components/schemas/token"
                moodleKey:
                  $ref: "#/components/schemas/moodleKey"
      responses:
        200:
          $ref: "#/components/responses/Rate"
  /compose/{code}:
    post:
      summary: Create a post with details
      description: Compose a post in native database or in Moodle
      tags:
        - Create Posts
      parameters:
        - name: code
          in: path
          description: Course code
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                token:
                  $ref: "#/components/schemas/token"
                moodleKey:
                  $ref: "#/components/schemas/moodleKey"
                title:
                  type: string
                  description: Title of the post being created
                subtitle:
                  type: string
                  description: Subtitle of the post being created (Nullable)
                hashtag:
                  $ref: "#/components/schemas/hashtag"
                content:
                  type: string
                  description: Content of the post being created
                anonymous:
                  type: integer
                  minimum: 0
                  maximum: 1
                  description: Determine whether the post author is anonymous or not (Nullable when native = 0)
                native:
                  type: integer
                  minimum: 0
                  maximum: 1
                  description: Determine whether the post created in native database or Moodle
      responses:
        200:
          description: 200 - Success<br>204 - Return empty post<br>401 - Unauthenticated<br>404 - Moodle no Default Forum<br>406 - Moodle post not created<br>408 - Moodle Key Timeout<br>412 - Course not enrolled in Moodle<br>500 - Unknown error<br>502 - Database issue
          content:
            application/json:
              schema:
                properties:
                  payload:
                    type: list
                    description: Info of the post created
          examples:
            Success:
              status: 200
              payload: {"topicId": "mod424377"}
            Failure:
              status: 500
              error: "Unknown error"
  /view/{topicId}:
    post:
      summary: Load contents and reply of a post
      description: Return the details of a post chronologically in json format
      tags:
        - Fetch Posts
      parameters:
        - name: topicId
          in: path
          description: Id of a post
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                token:
                  $ref: "#/components/schemas/token"
                moodleKey:
                  $ref: "#/components/schemas/moodleKey"
      responses:
        200:
          description: 200 - Success<br>401 - Unauthenticated<br>408 - Moodle Key Timeout<br>412 - Course not enrolled in Moodle<br>500 - Unknown error<br>502 - Database issue
          content:
            application/json:
              schema:
                properties:
                  title:
                    type: string
                    description: title of post
                  subtitle:
                    type: string
                    description: subtitle of post, nullable
                  native:
                    type: number
                    description: 1 to indicate is post native, nullable
                  solved:
                    type: string
                    description: postId of solving post, nullable
                  posts:
                    type: list
                    description: An array of returned posts' contents
          examples:
            Success:
              status: 200
              payload:
                title: "title"
                subtitle: "subtitle"
                native: 1
                solved: "7b4c2a9840c9d58ce624cfb2c6dd988c9d4dfc0377fcc21d5594ce1cc0202342"
                posts: [{"id":"9b4c2a9840c9d58ce624cfb2c6dd988c9d4dfc0377fcc21d5594ce1cc724376c","timestamp":"2018-12-01T16:00:00.000Z","temperature":0,"content":"content...","author":"userA"},{"id":"939a848b3e04bb8f58599487c49dabb40d45a56c4e6461092bd8be89f730b0ac","timestamp":"2018-12-02T16:00:00.000Z","temperature":0,"content":"content..."}]
            Failure:
              status: 500
              error: "Unknown error"
  /export/courses:
    get:
      summary: Snapshot all Faculties, Departments and Courses in json format
      description: Create snapshot for static file in Front-end UI
      tags:
        - Export
      responses:
        200:
          description: Json containing all Faculty, Department and Courses
          content:
            application/json:
              schema:
                properties:
                  Result:
                    type: list
                    description: An array of Faculty-Department-Course hierarchy
          examples:
            Result: [{"id":"ARCH","title":"Architecture Faculty","links":[{"id":"ARCH2059","title":"ARCH2059","description":"Architectural History and Theory 2 - Global Perspectives I"}],"children":[{"id":"ARCH","title":"Dept of Architecture","links":[{"id":"ARCH1031","title":"ARCH1031","description":"Landscape Representation 1: Forms and Methods"}]}]}]
  /post/{code}/{index}:
    post:
      summary: Load posts by course code and index
      description: Load posts according the course code then return in json format
      tags:
        - Posts
      parameters:
        - name: filter
          in: query
          description: 0 - Moodle, 1 - Timestamp, 2 - Replies, 3 - Temperature
          required: false
          schema:
            type: integer
        - name: time
          in: query
          description: Timestamp
          required: true
          schema:
            type: integer
        - name: code
          in: path
          description: Course code
          required: true
          schema:
            type: string
        - name: index
          in: path
          description: Page index of posts returned starting from 1
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                token:
                  $ref: "#/components/schemas/token"
                moodleKey:
                  $ref: "#/components/schemas/moodleKey"
                query:
                  type: string
                  description: URI encoded query string for searching posts (Nullable)
                hashtag:
                  $ref: "#/components/schemas/hashtag"
      responses:
        200:
          description: 200 - Success<br>204 - No more post<br>408 - Moodle Key not valid<br>421 - crawling error<br>500 - Unknown error<br>502 - Database connection issue<br>422 - Parameter(s) mismatched<br>401 - Unauthenticated
          content:
            application/json:
              schema:
                properties:
                  payload:
                    type: list
                    description: An array of returned posts
          examples:
            Success:
              status: 200
              payload: [{"id":"9b4c2a9840c9d58ce624cfb2c6dd988c9d4dfc0377fcc21d5594ce1cc724376c","native":true,"solved":"False","title":"Title","subtitle":"Subtitle","timestamp":"2018-12-01T16:00:00.000Z","primaryHashtag":"hashtag","replyNo":1},{"id":"939a848b3e04bb8f58599487c49dabb40d45a56c4e6461092bd8be89f730b0ac","native":true,"solved":"False","title":"Title","subtitle":"Subtitle","timestamp":"2018-11-30T16:00:00.000Z","replyNo":0}]
            Failure:
              status: 500
              error: "Unknown error"
  /login/validate:
    post:
      summary: Validate the `moodleKey` in Moodle
      description: Since `moodleKey` may expire as being a cookie, this route helps checking its accessibility.
      tags:
        - Authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                moodleKey:
                  $ref: "#/components/schemas/moodleKey"
      responses:
        200:
          description: 200 - Success<br>422 - Parameter mismatched<br>500 - Unknown error
          content:
            application/json:
              schema:
                properties:
                  isValid:
                    type: boolean
                    description: Flag showing the usability of moodleKey in accessing Moodle
          examples:
            Success:
              status: 200
              payload: {"isValid":true}
            Failure:
              status: 500
              error: "Unknown error"
  /login/passphrase:
    post:
      summary: Login using username and encrypted password
      description: Login behavior using username and password. An authentication cookie string for crawling with encrypted password and unique token will be returned.
      tags:
        - Authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  $ref: "#/components/schemas/username"
                passphrase:
                  $ref: "#/components/schemas/passphrase"
      responses:
        200:
          $ref: "#/components/responses/Login"
  /login/password:
    post:
      summary: Login using username and plaintext password
      description: Login behavior using username and password. An authentication cookie string for crawling with encrypted password and unique token will be returned.
      tags:
        - Authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                  username:
                    $ref: "#/components/schemas/username"
                  password:
                    type: string
                    format: password
                    description: Password of HKU Portal
      responses:
        200:
          $ref: "#/components/responses/Login"
  /:
    get:
      summary: WebAPI status placeholder
      description: Not useful excepts proving the WebAPI server is running
      tags:
        - Miscellaneous
      responses:
        200:
          $ref: "#/components/responses/Basic"
        500:
          $ref: "#/components/responses/Failure"
  /database:
    get:
      summary: RDS connection status test, **for internal development ONLY**
      description: Query a record from relation in RDS and return
      tags:
        - Miscellaneous
      responses:
        200:
          description: 200 - Success<br>502 - RDS connectivity issue
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Standard-Array"
                  - $ref: "#/components/schemas/Error"
          examples:
            Success:
              status: 200
              payload: [{"Message":"Successfully returned from RDS"}]
            Failure:
              status: 502
              error: "Database connection failure"
components:
  responses:
    Rate:
      description: 200 - Success<br>401 - Unauthenticated<br>408 - Moodle Key Timeout<br>409 - Entry conflict<br>500 - Unknown error<br>502 - Database issue
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/Empty-Payload"
              - $ref: "#/components/schemas/Error"
      examples:
        Success:
          status: 200
        Failure:
          status: 409
          error: "Entry conflict"
    Login:
      description: 200 - Success<br>502 - RDS connectivity issue<br>401 - Username / Password mismatched<br>421 - No 2nd / 3rd level login redirect url matched<br>400 - No 2nd / 3rd level login redirect<br>500 - Unknown crawler issue<br>422 - Parameter(s) mismatched
      content:
        application/json:
          schema:
            properties:
              moodleKey:
                $ref: "#/components/schemas/moodleKey"
              passphrase:
                $ref: "#/components/schemas/passphrase"
              token:
                $ref: "#/components/schemas/token"
      examples:
        Success:
          status: 200
          payload: {"moodleKey":"********","passphrase":"********","token":"********"}
        Failure:
          status: 502
          error: 'Unauthenticated'
    Basic:
      description: Return standard message
      content:
        application/json:
          schema:
            oneOf:
              - $ref: "#/components/schemas/Standard"
              - $ref: "#/components/schemas/Standard-Array"
      examples:
        Standard:
          status: 200
          payload: {}
        Standard-Array:
          status: 200
          payload: []
    Failure:
      description: Return error message
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    username:
      type: string
      description: Username of HKU Portal
    moodleKey:
      type: string
      description: Server-side encrypted Moodle authentication cookie string
    passphrase:
      type: string
      description: Server-side encrypted user password with `CIPER_KEY`. Irregular.
    token:
      type: string
      description: Generated account secret key from `UserId`, `Date` and `CIPER_KEY`
    hashtag:
      type: object
      description: Hashtag object to be searched via `LIKE` in SQL (Nullable)
      properties:
        primary:
          type: string
          description: Primary hashtag to be queried
        secondary:
          type: string
          description: Secondary hashtag to be queried
    Standard:
      type: object
      properties:
        status:
          type: number
        payload:
          type: object
    Standard-Array:
      type: object
      properties:
        status:
          type: number
        payload:
          type: array
    Empty-Payload:
      type: object
      properties:
        status:
          type: number
    Error:
      type: object
      properties:
        status:
          type: number
        error:
          type: string
